{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__UnAuthorized();\nerror FundMe__Unexpected();\n\n/**\n * @title A crowd funding contract, accepts ether\n * @author Fahad Salamat Randhawa\n * @notice This is a sample for web3 portfolio\n * @dev This uses price feed from chainlink to get token/ether value\n */\n\ncontract FundMe {\n    using PriceConverter for uint;\n\n    address public immutable i_owner; //assign-able once\n    uint public constant MINIMUM_USD = 5 * 1e18; //gas efficient\n    address[] public funders;\n    mapping(address => uint) public AmountToAddress;\n\n    AggregatorV3Interface public immutable priceFeed;\n\n    constructor(address _priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\n    }\n\n    modifier verifyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe__UnAuthorized();\n        }\n\n        //execute rest of code if require validates\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function withdraw() external verifyOwner {\n        address[] memory m_funders = funders;\n        for (\n            uint fundersIndex = 0;\n            fundersIndex < m_funders.length;\n            fundersIndex++\n        ) {\n            AmountToAddress[m_funders[fundersIndex]] = 0;\n        }\n        //refresh funders list\n        funders = new address[](0);\n\n        //transfer all balance from this contract to msg.sender, no gas limit\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!success) {\n            revert FundMe__Unexpected();\n        }\n    }\n\n    function fund() public payable {\n        //convert Ether to USD\n        require(\n            msg.value.conversion(priceFeed) >= MINIMUM_USD,\n            \"Send minimum $5\"\n        );\n\n        //keep record of funders\n        funders.push(msg.sender);\n        AmountToAddress[msg.sender] += msg.value;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function conversion(\r\n        uint _amount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint) {\r\n        (, int answer, , , ) = priceFeed.latestRoundData();\r\n        return ((uint(answer * 1e10) * _amount) / 1e18);\r\n    }\r\n\r\n    function conversionRate(\r\n        AggregatorV3Interface priceFeed\r\n    ) public view returns (uint) {\r\n        (, int answer, , , ) = priceFeed.latestRoundData();\r\n        return uint(answer * 1e10);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}